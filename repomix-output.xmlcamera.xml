This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: Assets/CameraSettings.cs, Assets/CameraFollow.cs
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
Assets/CameraFollow.cs
Assets/CameraSettings.cs
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="Assets/CameraFollow.cs">
using UnityEngine;

public class CameraFollow : MonoBehaviour
{
    [SerializeField] private Transform target; // Назначь Carrier
    [SerializeField] private float smoothSpeed = 0.125f; // Плавность следования
    [SerializeField] private Vector3 offset = new Vector3(0f, 0f, -10f); // Базовое смещение
    [SerializeField] private float startZoomDistance = 2f; // Начальное близкое расстояние
    [SerializeField] private float targetZoomDistance = -15f; // Конечное отдаление
    [SerializeField] private float zoomDuration = 2f; // Длительность анимации (секунд)

    private bool isZooming = true; // Флаг для анимации

    private void Start()
    {
        StartCoroutine(ZoomOutCoroutine());
    }

    private void LateUpdate()
    {
        if (target == null)
        {
            Debug.LogWarning("CameraFollow: Target not assigned!");
            return;
        }

        if (!isZooming)
        {
            Vector3 desiredPosition = target.position + offset;
            Vector3 smoothedPosition = Vector3.Lerp(transform.position, desiredPosition, smoothSpeed);
            transform.position = smoothedPosition;
        }
    }

    private System.Collections.IEnumerator ZoomOutCoroutine()
    {
        float elapsedTime = 0f;
        Vector3 startPosition = transform.position;
        Vector3 targetPosition = target.position + new Vector3(0f, 0f, targetZoomDistance);

        while (elapsedTime < zoomDuration)
        {
            elapsedTime += Time.deltaTime;
            float t = elapsedTime / zoomDuration;
            transform.position = Vector3.Lerp(startPosition, targetPosition, t);
            yield return null; // Ждём следующий кадр
        }

        transform.position = targetPosition; // Устанавливаем финальную позицию
        isZooming = false; // Завершаем анимацию
    }
}
</file>

<file path="Assets/CameraSettings.cs">
using UnityEngine;

[RequireComponent(typeof(Camera))]
public class CameraSettings : MonoBehaviour
{
    private Camera cam;
    private float lastHeight = 0f;
    private const float PPI_ADJUSTMENT = 100f; // Константа для PPI (пример для 1080p)

    private void Awake()
    {
        cam = GetComponent<Camera>();
        if (cam == null)
        {
            Debug.LogError("CameraSettings: No Camera component found! Disabling script.");
            enabled = false;
            return;
        }
        UpdateOrthographicSize(); // Инициализация размера
    }

    private void Update()
    {
        if (Mathf.Abs(Screen.height - lastHeight) > 10f) // Минимальный порог 10 пикселей
        {
            UpdateOrthographicSize();
        }
    }

    private void UpdateOrthographicSize()
    {
        lastHeight = Screen.height;
        cam.orthographicSize = lastHeight / (2f * PPI_ADJUSTMENT); // Половина высоты в мировых единицах
        Debug.Log($"Camera orthographicSize updated to: {cam.orthographicSize} for height: {lastHeight}");
    }

    private void OnEnable()
    {
        //ScreenResolutionChanged += OnResolutionChanged; // Исправлено на ScreenResolutionChanged
    }

    private void OnDisable()
    {
       // ScreenResolutionChanged -= OnResolutionChanged; // Убедись, что отписываемся
    }

    private void OnResolutionChanged(Resolution resolution)
    {
        UpdateOrthographicSize();
    }
}
</file>

</files>
