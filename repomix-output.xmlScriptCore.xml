"Эта структура показывает текущее состояние проекта, включи необходимы RequireComponent и публичные методы, если они нужны."
<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: Assets/Scripts/Core, Assets/Scripts/Entities
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
Assets/Scripts/Core/Entity.cs
Assets/Scripts/Core/Entity.cs.meta
Assets/Scripts/Core/Ship.cs
Assets/Scripts/Core/Ship.cs.meta
Assets/Scripts/Core/Weapon.cs
Assets/Scripts/Core/Weapon.cs.meta
Assets/Scripts/Entities/Carrier.cs
Assets/Scripts/Entities/Carrier.cs.meta
Assets/Scripts/Entities/Enemy.cs
Assets/Scripts/Entities/Enemy.cs.meta
Assets/Scripts/Entities/Interceptor.cs
Assets/Scripts/Entities/Interceptor.cs.meta
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="Assets/Scripts/Core/Entity.cs">
using UnityEngine;

public abstract class Entity : MonoBehaviour
{
    [SerializeField] protected float mass = 1f; // Масса (для Rigidbody2D)
    [SerializeField] protected float maxHealth = 1000f; // Максимальное здоровье
    protected float Health { get; set; }
    protected Vector2 Direction { get; set; } // Направление движения (нормализованный вектор)
    protected Rigidbody2D Rigidbody { get; private set; }

    protected virtual void Awake()
    {
        Rigidbody = GetComponent<Rigidbody2D>();
        if (Rigidbody == null)
        {
            Rigidbody = gameObject.AddComponent<Rigidbody2D>();
            Rigidbody.bodyType = RigidbodyType2D.Dynamic;
            Rigidbody.gravityScale = 0f; // Космос
        }
        Rigidbody.mass = mass;
        Health = maxHealth;
    }

    protected virtual void Update()
    {
        if (Health <= 0) Destroy(gameObject);
        Direction = Rigidbody.linearVelocity.normalized; // Обновление направления на основе скорости
    }

    public virtual void TakeDamage(float damage, bool ignoreShields = false)
    {
        Health -= damage;
        if (Health <= 0)
        {
            // Псевдокод: Взрыв или уничтожение
            Destroy(gameObject);
        }
    }
}
</file>

<file path="Assets/Scripts/Core/Entity.cs.meta">
fileFormatVersion: 2
guid: f0602efb5f3803a4db7bd3dbb67a4f15
</file>

<file path="Assets/Scripts/Core/Ship.cs">
using UnityEngine;
using System.Collections.Generic;

public abstract class Ship : Entity
{
    [SerializeField] protected float shields = 500f; // Щиты
    [SerializeField] protected float maxShields = 500f; // Максимум щитов
    [SerializeField] protected float acceleration = 200f; // Ускорение
    [SerializeField] protected float maxSpeed = 100f; // Максимальная скорость
    protected List<Weapon> weapons = new List<Weapon>(); // Набор оружия
    protected Transform target; // Цель

    protected override void Awake()
    {
        base.Awake();
        // Инициализация оружия (добавь в Inspector или коде)
    }

    protected override void Update()
    {
        base.Update();
        if (shields < maxShields) shields += Time.deltaTime * 10f; // Пример регена щитов
    }

    protected void Move(Vector2 input)
    {
        Vector2 force = input.normalized * acceleration;
        Rigidbody.AddForce(force * Time.deltaTime, ForceMode2D.Impulse);
        if (Rigidbody.linearVelocity.magnitude > maxSpeed)
        {
            Rigidbody.linearVelocity = Rigidbody.linearVelocity.normalized * maxSpeed;
        }
    }

    public void SetTarget(Transform newTarget)
    {
        target = newTarget;
    }
}
</file>

<file path="Assets/Scripts/Core/Ship.cs.meta">
fileFormatVersion: 2
guid: 1b76a84e6409d48439b4eff6d33e23b1
</file>

<file path="Assets/Scripts/Core/Weapon.cs">
using UnityEngine;

public abstract class Weapon : MonoBehaviour
{
    [SerializeField] protected float damage = 20f; // Дамаг
    [SerializeField] protected bool ignoresShields = false; // Игнорирует щиты (для Rocket)
    [SerializeField] protected float speed = 300f; // Скорость (для PhotonBall/Rocket)

    protected Rigidbody2D rb; // Для физики движения

    protected virtual void Awake()
    {
        rb = GetComponent<Rigidbody2D>();
        if (rb == null)
        {
            rb = gameObject.AddComponent<Rigidbody2D>();
            rb.bodyType = RigidbodyType2D.Kinematic; // Для управляемого движения
            rb.gravityScale = 0;
        }
        GetComponent<Collider2D>().isTrigger = true; // Для OnTriggerEnter2D вместо столкновений
    }

    protected virtual void Update()
    {
        // Базовое движение (переопределяется в наследниках)
        transform.position += transform.right * speed * Time.deltaTime;
    }

    protected virtual void OnTriggerEnter2D(Collider2D other)
    {
        Entity entity = other.GetComponent<Entity>();
        if (entity != null)
        {
            entity.TakeDamage(damage, ignoresShields);
            // Взрыв: Instantiate(explosionPrefab, transform.position, Quaternion.identity);
            Destroy(gameObject); // Уничтожить снаряд
        }
    }

    public float Damage => damage;
    public bool IgnoresShields => ignoresShields;

    public abstract bool IsGuided(); // Для Rocket
    public abstract void SetTarget(Vector2 targetPos); // Для guided
}
</file>

<file path="Assets/Scripts/Core/Weapon.cs.meta">
fileFormatVersion: 2
guid: c7debfd415aa62046a2c94eac8a5a8fa
</file>

<file path="Assets/Scripts/Entities/Carrier.cs">
using UnityEngine;
using UnityEngine.InputSystem;
using System.Collections.Generic;

public class Carrier : Ship
{
    [SerializeField] private int maxInterceptors = 5; // Максимум истребителей
    private List<Interceptor> hangar = new List<Interceptor>(); // Ангар для истребителей

    private InputAction moveHorizontal;
    private InputAction moveVertical;
    private InputAction clickAction;
    private InputAction clickPosition;

    private Vector2 smoothInput;

    protected override void Awake()
    {
        base.Awake();
        var playerInput = GetComponent<PlayerInput>();
        if (playerInput == null)
        {
            Debug.LogError("PlayerInput component not found on Carrier! Please add it.");
            return;
        }
        moveHorizontal = playerInput.actions["MoveHorizontal"];
        moveVertical = playerInput.actions["MoveVertical"];
        clickAction = playerInput.actions["Click"];
        clickPosition = playerInput.actions["ClickPosition"];
    }

    private void FixedUpdate()
    {
        HandleMovement(Time.fixedDeltaTime);
    }

    private void HandleMovement(float deltaTime)
    {
        float rawX = moveHorizontal.ReadValue<float>();
        float rawY = moveVertical.ReadValue<float>();
        smoothInput = Vector2.Lerp(smoothInput, new Vector2(rawX, rawY), 0.1f);
        Vector2 input = smoothInput;
        if (clickAction.WasPerformedThisFrame())
        {
            Vector2 mousePos = clickPosition.ReadValue<Vector2>();
            mousePos = Camera.main.ScreenToWorldPoint(mousePos);
            input = (mousePos - (Vector2)transform.position).normalized;
            smoothInput = input;
        }
        Vector2 force = input.normalized * acceleration;
        Rigidbody.AddForce(force * deltaTime, ForceMode2D.Impulse);
        if (Rigidbody.linearVelocity.magnitude > maxSpeed)
        {
            Rigidbody.linearVelocity = Rigidbody.linearVelocity.normalized * maxSpeed;
        }
        if (Rigidbody.linearVelocity.magnitude > 0.1f)
        {
            float targetAngle = Mathf.Atan2(Rigidbody.linearVelocity.y, Rigidbody.linearVelocity.x) * Mathf.Rad2Deg - 90f;
            transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.Euler(0, 0, targetAngle), 0.2f);
        }
        if (input != Vector2.zero)
        {
            Debug.Log($"Input: {input}, Force: {force}, Velocity: {Rigidbody.linearVelocity}");
        }
    }

    public void AddInterceptor(Interceptor interceptor)
    {
        if (hangar.Count < maxInterceptors) hangar.Add(interceptor);
    }
}
</file>

<file path="Assets/Scripts/Entities/Carrier.cs.meta">
fileFormatVersion: 2
guid: 7d02d302204556342bea457721264de2
</file>

<file path="Assets/Scripts/Entities/Enemy.cs">
using UnityEngine;

public class Enemy : Ship
{
    // Специфические параметры для Enemy
    [SerializeField] private float enemySpecificParam = 50f; // Пример

    protected override void Update()
    {
        base.Update();
        // Логика врагов
    }
}
</file>

<file path="Assets/Scripts/Entities/Enemy.cs.meta">
fileFormatVersion: 2
guid: c3a4c27d4e04e7e4a898dc028894695b
</file>

<file path="Assets/Scripts/Entities/Interceptor.cs">
using UnityEngine;

public class Interceptor : Ship
{
    // Специфические параметры для Interceptor
    [SerializeField] private float patrolRadius = 150f; // Радиус патруля
    [SerializeField] private float attackRadius = 75f; // Радиус атаки

    private Carrier carrier; // Ссылка на Carrier

    protected override void Awake()
    {
        base.Awake();
        carrier = FindFirstObjectByType<Carrier>();
    }

    protected override void Update()
    {
        base.Update();
        // Логика вылета из ангара при появлении цели
    }
}
</file>

<file path="Assets/Scripts/Entities/Interceptor.cs.meta">
fileFormatVersion: 2
guid: 1d0d8e61c4bf0b040b428bf98c59572c
</file>

</files>
